/**
 * Configuration for jacoco
 */

plugins {
    id 'java'
    id 'jacoco'
    id 'starter.java.property-conventions'
}

jacoco {
    toolVersion = jacoco_version
    reportsDir = file("$buildDir/jacoco")
}

test {
    finalizedBy jacocoTestReport
    finalizedBy jacocoTestCoverageVerification
}


jacocoTestReport {
    reports {
        html.enabled true
        xml.enabled true
        csv.enabled false
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/*MapperImpl.*'] )
        }))
    }

    dependsOn test
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = jacoco_enforce_violations
            //enabled = project.hasProperty('jacoco_enforce_violations') ? jacoco_enforce_violations : jacoco_enforce_violations_default
            //enabled = ((!project.hasProperty('jacoco_ignore_violations')) && getPropertyOrDefault('jacoco_enforce_violations_default', false))
            //enabled = ((!getPropertyOrDefault('jacoco_ignore_violations', false)) && getPropertyOrDefault('jacoco_enforce_violations_default', false))
            //enabled = !getValueOrDefault(project.properties['jacoco_ignore_violations'], false) && getValueOrDefault(project.properties['jacoco_enforce_violations_default'], false)
            limit {
                minimum = jacoco_minimum_coverage
            }
            afterEvaluate {
                classDirectories.setFrom(files(classDirectories.files.collect {
                    fileTree(dir: it, exclude: ['**/*MapperImpl.*', '**/*Application.*'] )
                }))
            }
        }
    }
}



