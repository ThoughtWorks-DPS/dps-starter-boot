/**
 * Tasks for debugging build problems
 * - printSourceSetInformation  outputs source set content and classpath info for each type
 * - javaVersion  outputs the version of the java jdk used for building the code
 */

tasks.register('printSourceSetInformation'){
    group = JavaBasePlugin.DOCUMENTATION_GROUP
    description = "Show source set definitions"
    doLast {
        sourceSets.each { srcSet ->
            println "["+srcSet.name+"]"
            print "-->Source directories: "+srcSet.allJava.srcDirs+"\n"
            print "-->Output directories: "+srcSet.output.classesDirs.files+"\n"
            print "-->Compile classpath:\n"
            srcSet.compileClasspath.files.each {
                print "  "+it.path+"\n"
            }
            println ""
        }
    }
}

var javaVersion = tasks.register("javaVersion", Exec) {
    group = JavaBasePlugin.DOCUMENTATION_GROUP
    description = "Output java version being used"
    executable "java"
    args "-version"
}

var javaConfigVersion = tasks.register("javaConfigVersion") {
    group = JavaBasePlugin.DOCUMENTATION_GROUP
    description = "Output java version configured in gradle.properties (or default)"
    var jdkVersion = getPropertyOrDefault("java_target_version", 'not set')
    doLast {
        println "JDK Target Version: [" + jdkVersion + "]"
        println "doLast: [" + getPropertyOrDefault("java_target_version", 'still not set') + "]"
    }
}

tasks.named('test') {
    mustRunAfter javaVersion
    mustRunAfter javaConfigVersion
}

tasks.named('check').configure {
    dependsOn javaVersion
    dependsOn javaConfigVersion
}
