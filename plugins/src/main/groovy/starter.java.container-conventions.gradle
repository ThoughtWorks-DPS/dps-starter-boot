/**
 * Provides docker container settings
 */

plugins {
    id 'base'
    id 'com.palantir.docker'
    id 'com.palantir.docker-run'
    id 'com.palantir.docker-compose'
    id 'starter.java.property-conventions'
}

ext {
    dockerRegistry = project.hasProperty("dockerRegistry") ? "${project.dockerRegistry}" : "${group}"
    dockerImageVersion = project.hasProperty("buildNumber") ? "${project.version}-${project.buildNumber}" : project.version
}

docker {
    dependsOn(assemble)
    name "${dockerRegistry}/${rootProject.name}"
    tag "Build", "${dockerRegistry}/${rootProject.name}:${dockerImageVersion}"
    tag "Latest", "${dockerRegistry}/${rootProject.name}:latest"
    noCache true
    dockerfile file('src/docker/Dockerfile')
}

dockerRun {
    name project.name
    image "${dockerRegistry}/${rootProject.name}"
    ports '8080:8080'
    env 'SECRETHUB_HELLO': getEnvOrDefault('SECRETHUB_HELLO', 'override-me')
    dependsOn tasks.named("docker")
}

dockerCompose {
    dockerComposeFile 'src/docker/docker-compose.yml'
}

def dockerStart = tasks.register('dockerStart', GradleBuild) {
    tasks = ["dockerPrune", "clean", "dockerClean", "docker", "dockerRun"]
}

def dockerPrune = tasks.register('dockerPrune', GradleBuild) {
    mustRunAfter('dockerStop', 'dockerRemoveContainer')
    tasks = ["dockerPruneContainer", "dockerPruneImage"]
}

def dockerPruneContainer = tasks.register('dockerPruneContainer', Exec) {
    executable "/usr/bin/docker"
    args "container", "prune", "-f"
}

def dockerPruneImage = tasks.register('dockerPruneImage', Exec) {
    executable "/usr/bin/docker"
    args "image", "prune", "-f"
}

def dockerPruneVolume = tasks.register('dockerPruneVolume', Exec) {
    executable "/usr/bin/docker"
    args "volume", "prune", "-f"
}

def dcPrune = tasks.register('dcPrune', GradleBuild) {
    mustRunAfter('dockerComposeDown')
    tasks = ["dockerPruneContainer", "dockerPruneImage"]
}

def dcPruneVolume = tasks.register('dcPruneVolume', GradleBuild) {
    mustRunAfter('dockerComposeDown')
    tasks = [ "dockerPruneVolume" ]
}

dockerRemoveContainer.configure {
    mustRunAfter('dockerStop')
}

tasks.named("dockerComposeUp").configure {
    dependsOn tasks.named("docker")
}

/*
task dockerSterilize(type: GradleBuild) {
    tasks = ["dockerComposeDown",
             "dockerStop",
             "dockerRemoveContainer",
             "clean",
             "dockerClean",
             "dockerPrune",
             "dockerVolumePrune"]
}

 */

