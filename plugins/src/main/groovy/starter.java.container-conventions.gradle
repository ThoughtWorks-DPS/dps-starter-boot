/**
 * Provides docker container settings
 */

plugins {
    id 'com.palantir.docker'
    id 'com.palantir.docker-run'
    id 'com.palantir.docker-compose'
    id 'starter.java.property-conventions'
}

ext {
    dockerRegistry = project.hasProperty("dockerRegistry") ? "${project.dockerRegistry}" : "${group}"
    dockerImageVersion = project.hasProperty("buildNumber") ? "${project.version}-${project.buildNumber}" : project.version
}

docker {
    dependsOn(assemble)
    name "${dockerRegistry}/${rootProject.name}"
    tag "Build", "${dockerRegistry}/${rootProject.name}:${dockerImageVersion}"
    tag "Latest", "${dockerRegistry}/${rootProject.name}:latest"
    noCache true
    dockerfile file('src/docker/Dockerfile')
}

dockerRun {
    name project.name
    image "${dockerRegistry}/${rootProject.name}"
    ports '8080:8080'
    env 'SECRETHUB_HELLO': getEnvOrDefault('SECRETHUB_HELLO', 'override-me')
}

dockerCompose {
    dockerComposeFile 'src/docker/docker-compose.yml'
}

task dockerStart(type: GradleBuild) {
    tasks = ["dockerPrune", "clean", "dockerClean", "docker", "dockerRun"]
}

task dockerPrune(type: Exec) {
    dependsOn('dockerStop', 'dockerRemoveContainer')
    dockerRemoveContainer.mustRunAfter('dockerStop')
    executable "${project.rootDir}/scripts/docker-prune.sh"
    args "--container", "--image"
}

task dockerVolumePrune(type: Exec) {
    dependsOn('dockerStop', 'dockerRemoveContainer', 'dockerPrune')
    dockerRemoveContainer.mustRunAfter('dockerStop')
    dockerPrune.mustRunAfter('dockerRemoveContainer')
    executable "${project.rootDir}/scripts/docker-prune.sh"
    args "--volume"
}

task dcPrune(type: Exec) {
    dependsOn('dockerComposeDown')
    executable "${project.rootDir}/scripts/docker-prune.sh"
    args "--container", "--image"
}

task dcVolumePrune(type: Exec) {
    dependsOn('dockerComposeDown', 'dcPrune')
    dcPrune.mustRunAfter('dockerComposeDown')
    executable "${project.rootDir}/scripts/docker-prune.sh"
    args "--volume"
}

/*
task dockerSterilize(type: GradleBuild) {
    tasks = ["dockerComposeDown",
             "dockerStop",
             "dockerRemoveContainer",
             "clean",
             "dockerClean",
             "dockerPrune",
             "dockerVolumePrune"]
}

 */

